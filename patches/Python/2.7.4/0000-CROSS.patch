diff -urN a/Lib/distutils/README b/Lib/distutils/README
--- a/Lib/distutils/README	Wed Apr 17 21:33:48 2013
+++ b/Lib/distutils/README	Wed Apr 17 21:56:49 2013
@@ -9,5 +9,10 @@
     http://www.python.org/sigs/distutils-sig/
 
 WARNING : Distutils must remain compatible with 2.3
+NOTE: After "Revision 77704 : taking sysconfig out of distutils"
+Distutils package is not compatible with versions before 2.7a3.
+Although "Revision 77759 : reintroduced the names in Distutils for APIs
+that were relocated"(i.e. API is backward compatibile) to cross compile
+python on build system has to be at least version 2.7a3.
 
 $Id$
diff -urN a/Lib/sysconfig.py b/Lib/sysconfig.py
--- a/Lib/sysconfig.py	Wed Apr 17 21:33:49 2013
+++ b/Lib/sysconfig.py	Wed Apr 17 21:56:49 2013
@@ -3,7 +3,15 @@
 """
 import sys
 import os
-from os.path import pardir, realpath
+# revert patch from issue 7880 :
+#  - the test case (from issue 7880) works for me
+#  - realpath break cross compilation
+# => so lets use abspath again ;)
+# NOTE "Issue #6612: Fix site and sysconfig to catch os.getcwd() error,
+# eg. if the current directory was deleted." replase all occurrence of
+# realpath with _safe_realpath. Instead to update _safe_realpath to use
+# abspath the cross-compilation revert all!
+from os.path import pardir, abspath
 
 _INSTALL_SCHEMES = {
     'posix_prefix': {
@@ -94,27 +102,21 @@
 _CONFIG_VARS = None
 _USER_BASE = None
 
-def _safe_realpath(path):
-    try:
-        return realpath(path)
-    except OSError:
-        return path
-
 if sys.executable:
-    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))
+    _PROJECT_BASE = os.path.dirname(abspath(sys.executable))
 else:
     # sys.executable can be empty if argv[0] has been changed and Python is
     # unable to retrieve the real program name
-    _PROJECT_BASE = _safe_realpath(os.getcwd())
+    _PROJECT_BASE = abspath(os.getcwd())
 
 if os.name == "nt" and "pcbuild" in _PROJECT_BASE[-8:].lower():
-    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir))
+    _PROJECT_BASE = abspath(os.path.join(_PROJECT_BASE, pardir))
 # PC/VS7.1
 if os.name == "nt" and "\\pc\\v" in _PROJECT_BASE[-10:].lower():
-    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))
+    _PROJECT_BASE = abspath(os.path.join(_PROJECT_BASE, pardir, pardir))
 # PC/AMD64
 if os.name == "nt" and "\\pcbuild\\amd64" in _PROJECT_BASE[-14:].lower():
-    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))
+    _PROJECT_BASE = abspath(os.path.join(_PROJECT_BASE, pardir, pardir))
 
 # set for cross builds
 if "_PYTHON_PROJECT_BASE" in os.environ:
@@ -317,7 +319,7 @@
     vars['SO'] = '.pyd'
     vars['EXE'] = '.exe'
     vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT
-    vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))
+    vars['BINDIR'] = os.path.dirname(abspath(sys.executable))
 
 #
 # public APIs
diff -urN a/Makefile.pre.in b/Makefile.pre.in
--- a/Makefile.pre.in	Wed Apr 17 21:33:54 2013
+++ b/Makefile.pre.in	Wed Apr 17 21:56:49 2013
@@ -200,6 +200,10 @@
 PROFILE_TASK=	$(srcdir)/Tools/pybench/pybench.py -n 2 --with-gc --with-syscheck
 #PROFILE_TASK=	$(srcdir)/Lib/test/regrtest.py
 
+# Don't define HOST_OS as makefile macro !
+@CROSS_ON@RUNPYTHON=	HOST_OS=@HOST_OS@ @SYSPYTHON@
+@CROSS_OFF@RUNPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON)
+
 # === Definitions added by makesetup ===
 
 
@@ -467,10 +471,10 @@
 
 libpython$(VERSION).so: $(LIBRARY_OBJS)
 	if test $(INSTSONAME) != $(LDLIBRARY); then \
-		$(BLDSHARED) -Wl,-h$(INSTSONAME) -o $(INSTSONAME) $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
+		$(LDSHARED) -Wl,-h$(INSTSONAME) -o $(INSTSONAME) $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
 		$(LN) -f $(INSTSONAME) $@; \
 	else \
-		$(BLDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
+		$(LDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
 	fi
 
 libpython$(VERSION).dylib: $(LIBRARY_OBJS)
@@ -526,18 +530,17 @@
 oldsharedmods: $(SHAREDMODS)
 
 
+setup_info: setup_info.in config.status
+	$(SHELL) ./config.status $@
+
+
 Makefile Modules/config.c: Makefile.pre \
 				$(srcdir)/Modules/config.c.in \
 				$(MAKESETUP) \
 				Modules/Setup.config \
 				Modules/Setup \
 				Modules/Setup.local
-	$(SHELL) $(MAKESETUP) -c $(srcdir)/Modules/config.c.in \
-				-s Modules \
-				Modules/Setup.config \
-				Modules/Setup.local \
-				Modules/Setup
-	@mv config.c Modules
+	$(SHELL) ./config.status Makefile
 	@echo "The Makefile was updated, you may need to re-run make."
 
 
@@ -757,6 +760,7 @@
 
 TESTOPTS=	-l $(EXTRATESTOPTS)
 TESTPROG=	$(srcdir)/Lib/test/regrtest.py
+# FIXME: next test may fail in cross-compilation environment
 TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
 test:		all platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
@@ -1166,7 +1170,7 @@
 		fi; \
 	done
 	$(LN) -fsn include/python$(VERSION) $(DESTDIR)$(prefix)/Headers
-	sed 's/%VERSION%/'"`$(RUNSHARED) ./$(BUILDPYTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
+	sed 's/%VERSION%/'"`$(RUNPYTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
 	$(LN) -fsn $(VERSION) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Versions/Current
 	$(LN) -fsn Versions/Current/$(PYTHONFRAMEWORK) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/$(PYTHONFRAMEWORK)
 	$(LN) -fsn Versions/Current/Headers $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Headers
@@ -1228,8 +1232,8 @@
 # Rerun configure with the same options as it was run last time,
 # provided the config.status script exists
 recheck:
-	$(SHELL) config.status --recheck
-	$(SHELL) config.status
+	$(SHELL) ./config.status --recheck
+	$(SHELL) ./config.status
 
 # Rebuild the configure script from configure.ac; also rebuild pyconfig.h.in
 autoconf:
@@ -1330,7 +1334,7 @@
 
 # Perform some verification checks on any modified files.
 patchcheck:
-	$(RUNSHARED) ./$(BUILDPYTHON) $(srcdir)/Tools/scripts/patchcheck.py
+	$(RUNPYTHON) $(srcdir)/Tools/scripts/patchcheck.py
 
 # Dependencies
 
diff -urN a/configure.ac b/configure.ac
--- a/configure.ac	Wed Apr 17 21:33:47 2013
+++ b/configure.ac	Wed Apr 17 21:56:49 2013
@@ -11,6 +11,7 @@
 AC_INIT(python, PYTHON_VERSION, http://bugs.python.org/)
 AC_CONFIG_SRCDIR([Include/object.h])
 AC_CONFIG_HEADER(pyconfig.h)
+AC_CANONICAL_HOST
 
 AC_CANONICAL_HOST
 AC_SUBST(build)
@@ -69,6 +70,46 @@
 rm confdefs.h
 mv confdefs.h.new confdefs.h
 
+dnl makefile conditional (for future use)
+if test "x$cross_compiling" = xyes; then
+  CROSS_ON=''
+  CROSS_OFF='#'
+else
+  CROSS_ON='#'
+  CROSS_OFF=''
+fi
+AC_SUBST(CROSS_ON)
+AC_SUBST(CROSS_OFF)
+
+AC_PROG_LN_S
+if test "x$cross_compiling" = xyes; then
+  AC_MSG_WARN([cross-compilation is incomplete])
+
+  dnl In cross-compilation environment we need python from
+  dnl the build system (for future use)
+  AC_PATH_PROG(SYSPYTHON, python, [none],
+    [$PATH:/usr/local/bin]
+  )
+  if test "x$PYTHON" = xnone; then
+    AC_MSG_ERROR([python program is required in cross-compilation environment])
+  fi
+  SYSPYOSNAME=`${SYSPYTHON} -c "import os; print os.name"`
+  case $SYSPYOSNAME in
+  posix)
+    dnl On posix distutils read variables from installed makefile.
+    dnl We will do some hacks based on distutils internals to overcome
+    dnl this limitation:
+    dnl - we link system python in build directory so that it will
+    dnl   read generated file.
+    dnl As result from sysconfig.get_config_vars we will get our
+    dnl setting (for the host system) like SO, CFLAGS, CPPFLAGS,
+    dnl LDFLAGS instead those for the build system.
+    rm -f syspython
+    ${LN_S} ${SYSPYTHON} syspython
+    SYSPYTHON=./syspython
+  esac
+fi
+
 AC_SUBST(VERSION)
 VERSION=PYTHON_VERSION
 
@@ -302,8 +343,35 @@
 ##                           [Use (OpenStep|Rhapsody) dynamic linker]))
 ##
 # Set name for machine-dependent library files
+dnl Now configure script support cross-compilation and detection of host
+dnl system based on value of $ac_sys_system and/or $ac_sys_release
+dnl has to be avoided. It is superseded by "host triplet"(cpu-verdor-os).
+dnl FIXME: replace all cases based on $ac_sys_system and/or $ac_sys_release
+dnl with case based on $host ("host triplet") or $host_os.
+dnl Also cases with MACHDEP may be replaces by $host or $host_os. Note
+dnl script may not set this variable if cross compiling.
+
+dnl Next two variables are intended to be passed through makefile to other
+dnl scripts. As example setup.py check for CPU(machine) and OS(platform).
+HOST_CPU=$host_cpu
+AC_SUBST(HOST_CPU)
+HOST_OS=$host_os
+AC_SUBST(HOST_OS)
+
 AC_SUBST(MACHDEP)
+if test "x$cross_compiling" = xyes; then
+AC_MSG_WARN([
+  May be value of MACHDEP isn't correct if cross-compiling.
+  You may tweak configure script for you host system: $host])
+fi
 AC_MSG_CHECKING(MACHDEP)
+dnl Note that $host_os cann't be translated directly into python
+dnl specific $MACHDEP. As example on linux (kernel 2.x) the script below
+dnl will set MACHDEP to "linux2" but $host_os is only "linux".
+dnl Another point is in cross-compilation environment we cannot distinguish
+dnl linux with 1.x(if someone still use it) and 2.x host kernels.
+dnl As example setup.py check for linux2(get from sys.platform) and will
+dnl install some host plaform specific files into subdirectory "plat-linux2".
 if test -z "$MACHDEP"
 then
     # avoid using uname for cross builds
@@ -2869,7 +2937,11 @@
 else
 	MACHDEP_OBJS="$MACHDEP_OBJS $extra_machdep_objs"
 fi
-AC_MSG_RESULT(MACHDEP_OBJS)
+if test -z "$MACHDEP_OBJS"; then
+  AC_MSG_RESULT([none])
+else
+  AC_MSG_RESULT([$MACHDEP_OBJS])
+fi
 
 # checks for library functions
 AC_CHECK_FUNCS(alarm setitimer getitimer bind_textdomain_codeset chown \
@@ -3297,7 +3369,7 @@
 
 AC_MSG_RESULT($ac_cv_buggy_getaddrinfo)
 
-if test $have_getaddrinfo = no -o "$ac_cv_buggy_getaddrinfo" = yes
+if test $have_getaddrinfo = no || test "$ac_cv_buggy_getaddrinfo" = yes
 then
 	if test $ipv6 = yes
 	then
@@ -3806,6 +3878,7 @@
 fi
 
 # Multiprocessing check for broken sem_getvalue
+if test $ac_cv_func_sem_getvalue = yes; then
 AC_MSG_CHECKING(for broken sem_getvalue)
 AC_CACHE_VAL(ac_cv_broken_sem_getvalue,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
@@ -3840,6 +3913,7 @@
   AC_DEFINE(HAVE_BROKEN_SEM_GETVALUE, 1,
   [define to 1 if your sem_getvalue is broken.])
 fi
+fi
 
 # determine what size digit to use for Python's longs
 AC_MSG_CHECKING([digit size for Python's longs])
@@ -4024,7 +4098,7 @@
 # with setup.py.
 py_cv_lib_readline=no
 AC_MSG_CHECKING([how to link readline libs])
-for py_libtermcap in "" ncursesw ncurses curses termcap; do
+for py_libtermcap in "" tinfo ncursesw ncurses curses termcap; do
   if test -z "$py_libtermcap"; then
     READLINE_LIBS="-lreadline"
   else
@@ -4037,9 +4111,9 @@
   if test $py_cv_lib_readline = yes; then
     break
   fi
+  READLINE_LIBS=
 done
-# Uncomment this line if you want to use READINE_LIBS in Makefile or scripts
-#AC_SUBST([READLINE_LIBS])
+AC_SUBST([READLINE_LIBS])
 if test $py_cv_lib_readline = no; then
   AC_MSG_RESULT([none])
 else
@@ -4500,36 +4574,28 @@
 AC_MSG_RESULT(done)
 
 # generate output files
-AC_CONFIG_FILES(Makefile.pre Modules/Setup.config Misc/python.pc)
-AC_CONFIG_FILES([Modules/ld_so_aix], [chmod +x Modules/ld_so_aix])
-AC_OUTPUT
+AC_CONFIG_COMMANDS_PRE([
+AC_MSG_NOTICE([creating Modules/Setup])
 
-echo "creating Modules/Setup"
 if test ! -f Modules/Setup
 then
 	cp $srcdir/Modules/Setup.dist Modules/Setup
 fi
 
-echo "creating Modules/Setup.local"
+AC_MSG_NOTICE([creating Modules/Setup.local])
 if test ! -f Modules/Setup.local
 then
 	echo "# Edit this file for local setup changes" >Modules/Setup.local
-fi
+fi])
 
-echo "creating Makefile"
-$SHELL $srcdir/Modules/makesetup -c $srcdir/Modules/config.c.in \
+AC_CONFIG_COMMANDS([Makefile],
+[$SHELL $srcdir/Modules/makesetup -c $srcdir/Modules/config.c.in \
 			-s Modules Modules/Setup.config \
 			Modules/Setup.local Modules/Setup
 
-case $ac_sys_system in
-BeOS)
-        AC_MSG_WARN([
 
-  Support for BeOS is deprecated as of Python 2.6.
-  See PEP 11 for the gory details.
-  ])
-  ;;
-*) ;;
-esac
-
-mv config.c Modules
+mv config.c Modules])
+AC_CONFIG_FILES([setup_info])
+AC_CONFIG_FILES([Makefile.pre Modules/Setup.config Misc/python.pc])
+AC_CONFIG_FILES([Modules/ld_so_aix], [chmod +x Modules/ld_so_aix])
+AC_OUTPUT
diff -urN a/setup.py b/setup.py
--- a/setup.py	Wed Apr 17 21:33:59 2013
+++ b/setup.py	Wed Apr 17 22:28:37 2013
@@ -29,6 +29,22 @@
     return sys.platform
 host_platform = get_platform()
 
+
+def _get_platform():
+    # Get value of host platform (set only if cross-compile)
+    # otherwise value of sys.platform
+    host_platform = os.environ.get('HOST_OS')
+    if host_platform is None:
+        host_platform = sys.platform
+    for platform in ['cygwin', 'beos', 'darwin', 'atheos', 'osf1']:
+        if host_platform.startswith(platform):
+            return platform
+    return host_platform
+
+host_platform = _get_platform()
+cross_compiling = (not os.environ.get('HOST_OS') is None)
+
+
 # Were we compiled --with-pydebug or with #define Py_DEBUG?
 COMPILED_WITH_PYDEBUG = ('--with-pydebug' in sysconfig.get_config_var("CONFIG_ARGS"))
 
@@ -436,9 +452,13 @@
             os.unlink(tmpfile)
 
     def detect_modules(self):
-        # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+        pyconfig_h_data = open('pyconfig.h').read()
+        setup_info_data = open('setup_info').read()
+
+        if not cross_compiling:
+            # Ensure that /usr/local is always used
+            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
         self.add_multiarch_paths()
 
         # Add paths specified in the environment variables LDFLAGS and
@@ -447,6 +467,9 @@
         # directly since an inconsistently reproducible issue comes up where
         # the environment variable is not set even though the value were passed
         # into configure and stored in the Makefile (issue found on OS X 10.3).
+        # NOTE: In cross-compilation environment python for build system
+        # is linked in top build directory under name syspython to get
+        # above to work (distutils hack).
         for env_var, arg_name, dir_list in (
                 ('LDFLAGS', '-R', self.compiler.runtime_library_dirs),
                 ('LDFLAGS', '-L', self.compiler.library_dirs),
@@ -698,12 +721,32 @@
             missing.extend(['imageop'])
 
         # readline
-        do_readline = self.compiler.find_library_file(lib_dirs, 'readline')
+        do_readline = re.search(r"#s*define\s+HAVE_LIBREADLINE\s+1\s*", pyconfig_h_data)
+
         readline_termcap_library = ""
         curses_library = ""
+
         # Determine if readline is already linked against curses or tinfo.
-        if do_readline and find_executable('ldd'):
-            fp = os.popen("ldd %s" % do_readline)
+        # NOTE readline_termcap_library is flag used only if cannot determine readline libs
+        readline_conf = False
+        readline_conf_termcap = ""
+        if do_readline:
+            m = re.search(r"\s*READLINE_LIBS\s*=\s*(?P<rl>-l.*)", setup_info_data)
+            if m:
+                readline_conf = True
+                ln = m.group('rl')
+                if 'curses' in ln:
+                    readline_conf_termcap = re.sub(
+                        r'.*-l(n?cursesw?).*', r'\1', ln
+                    ).rstrip()
+                elif 'tinfo' in ln: # termcap interface split out from ncurses
+                    readline_conf_termcap = 'tinfo'
+                else: # may be readline is linked with termcap interface library
+                    readline_conf = False
+
+        if do_readline and not readline_conf and find_executable('ldd'):
+            rl_lib = self.compiler.find_library_file(lib_dirs, 'readline')
+            fp = os.popen("ldd %s" % rl_lib)
             ldd_output = fp.readlines()
             ret = fp.close()
             if ret is None or ret >> 8 == 0:
@@ -718,7 +761,9 @@
                         break
         # Issue 7384: If readline is already linked against curses,
         # use the same library for the readline and curses modules.
-        if 'curses' in readline_termcap_library:
+        if 'curses' in readline_conf_termcap:
+            curses_library = readline_conf_termcap
+        elif 'curses' in readline_termcap_library:
             curses_library = readline_termcap_library
         elif self.compiler.find_library_file(lib_dirs, 'ncursesw'):
             curses_library = 'ncursesw'
diff -urN a/setup_info.in b/setup_info.in
--- a/setup_info.in	Thu Jan  1 00:00:00 1970
+++ b/setup_info.in	Wed Apr 17 22:28:37 2013
@@ -0,0 +1,3 @@
+# file with data from configure file
+
+READLINE_LIBS=@READLINE_LIBS@
