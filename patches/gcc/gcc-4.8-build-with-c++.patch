--- a/gcc/cp/class.c	2012-07-20 10:17:08.000000000 +0200
+++ b/gcc/cp/class.c	2012-07-20 16:29:20.466161900 +0200
@@ -7588,7 +7588,7 @@ 
   indented = maybe_indent_hierarchy (stream, indent, 0);
   fprintf (stream, "%s (0x%lx) ",
 	   type_as_string (BINFO_TYPE (binfo), TFF_PLAIN_IDENTIFIER),
-	   (unsigned long) binfo);
+	   (uintptr_t) binfo);
   if (binfo != igo)
     {
       fprintf (stream, "alternative-path\n");
@@ -7613,7 +7613,7 @@ 
       fprintf (stream, " primary-for %s (0x%lx)",
 	       type_as_string (BINFO_TYPE (BINFO_INHERITANCE_CHAIN (binfo)),
 			       TFF_PLAIN_IDENTIFIER),
-	       (unsigned long)BINFO_INHERITANCE_CHAIN (binfo));
+	       (uintptr_t)BINFO_INHERITANCE_CHAIN (binfo));
     }
   if (BINFO_LOST_PRIMARY_P (binfo))
     {
@@ -7746,7 +7746,7 @@ 
       if (ctor_vtbl_p)
 	{
 	  if (!BINFO_VIRTUAL_P (binfo))
-	    fprintf (stream, " (0x%lx instance)", (unsigned long)binfo);
+	    fprintf (stream, " (0x%lx instance)", (uintptr_t)binfo);
 	  fprintf (stream, " in %s", type_as_string (t, TFF_PLAIN_IDENTIFIER));
 	}
       fprintf (stream, "\n");
--- gcc/gcc/ggc-common.c	2011-02-15 19:12:46.000000000 +0100
+++ gcc/gcc/ggc-common.c	2012-07-20 10:26:20.767175200 +0200
@@ -308,7 +308,7 @@ 
   enum gt_types_enum type;
 };
 
-#define POINTER_HASH(x) (hashval_t)((long)x >> 3)
+#define POINTER_HASH(x) (hashval_t)((intptr_t)x >> 3)
 
 /* Register an object in the hash table.  */
 
--- a/gcc/pointer-set.c	2008-11-04 10:26:03.000000000 +0100
+++ b/gcc/pointer-set.c	2012-07-20 10:26:20.767175200 +0200
@@ -64,7 +64,7 @@ 
 #endif
   const unsigned long shift = HOST_BITS_PER_LONG - logmax;
 
-  return ((A * (unsigned long) p) >> shift) & (max - 1);
+  return ((A * (uintptr_t) p) >> shift) & (max - 1);
 }
 
 /* Allocate an empty pointer set.  */
--- a/gcc/prefix.c	2011-06-30 16:53:59.000000000 +0200
+++ b/gcc/prefix.c	2012-07-20 10:26:20.767175200 +0200
@@ -157,12 +157,12 @@ 
     }
 
   size = 32;
-  dst = xmalloc (size);
+  dst = (char *) xmalloc (size);
 
   res = RegQueryValueExA (reg_key, key, 0, &type, (LPBYTE) dst, &size);
   if (res == ERROR_MORE_DATA && type == REG_SZ)
     {
-      dst = xrealloc (dst, size);
+      dst = (char *) xrealloc (dst, size);
       res = RegQueryValueExA (reg_key, key, 0, &type, (LPBYTE) dst, &size);
     }
 
--- a/gcc/print-tree.c	2012-07-16 16:37:16.000000000 +0200
+++ b/gcc/print-tree.c	2012-07-20 10:26:20.767175200 +0200
@@ -255,7 +255,7 @@ 
   /* Allow this function to be called if the table is not there.  */
   if (table)
     {
-      hash = ((unsigned long) node) % HASH_SIZE;
+      hash = ((uintptr_t) node) % HASH_SIZE;
 
       /* If node is in the table, just mention its address.  */
       for (b = table[hash]; b; b = b->next)
--- a/gcc/tree-dump.c	2012-07-16 16:36:57.000000000 +0200
+++ b/gcc/tree-dump.c	2012-07-20 10:26:20.767175200 +0200
@@ -168,7 +168,7 @@ 
 dump_pointer (dump_info_p di, const char *field, void *ptr)
 {
   dump_maybe_newline (di);
-  fprintf (di->stream, "%-4s: %-8lx ", field, (unsigned long) ptr);
+  fprintf (di->stream, "%-4s: %-8lx ", field, (uintptr_t) ptr);
   di->column += 15;
 }
 
