diff -urN a/Lib/distutils/command/install.py b/Lib/distutils/command/install.py
--- a/Lib/distutils/command/install.py	2012-04-10 03:07:29 +0400
+++ b/Lib/distutils/command/install.py	2012-10-26 19:57:29 +0400
@@ -8,7 +8,7 @@
 
 __revision__ = "$Id$"
 
-import sys, os, string
+import sys, os, string, re
 from types import *
 from distutils.core import Command
 from distutils.debug import DEBUG
@@ -20,7 +20,28 @@
 from distutils.errors import DistutilsOptionError
 from site import USER_BASE
 from site import USER_SITE
+from string import maketrans
 
+def is_msys_mingw():
+    if os.environ.has_key("OSTYPE") and os.environ.has_key("MSYSTEM") and sys.version.find("GCC") >= 0:
+        if os.environ["MSYSTEM"] == "MINGW32" and os.environ["OSTYPE"] == "msys":
+            return 1
+    return 0
+
+def msys_root():
+    if os.environ.has_key("WD"):
+        arg = os.environ["WD"]
+        arg = arg.rstrip("\\")
+        if arg.endswith("\\bin"):
+            # drop the \\bin
+            arg = arg[:-4]
+        table = maketrans('\\', '/')
+        arg = arg.translate(table)
+        if arg.endswith("/"):
+            arg = arg[:-1]
+        return arg
+    else:
+        return None
 
 if sys.version < "2.2":
     WINDOWS_SCHEME = {
@@ -315,6 +336,14 @@
 
         self.dump_dirs("post-expand_basedirs()")
 
+        # MSYS (probably) will have transformed --root=/ to the
+        # windows path where the msys is installed, so we check if root begins
+        # with msysroot and if it does then we set root to None again!
+        if (self.root is not None and is_msys_mingw):
+            msysroot = msys_root()
+            if self.root.find(msysroot)==0:
+                self.root = None
+
         # Now define config vars for the base directories so we can expand
         # everything else.
         self.config_vars['base'] = self.install_base
diff -urN a/Lib/distutils/util.py b/Lib/distutils/util.py
--- a/Lib/distutils/util.py	2012-04-10 00:07:30.000000000 +0100
+++ b/Lib/distutils/util.py	2012-10-09 18:08:02.000000000 +0100
@@ -210,6 +210,13 @@
         paths.remove('.')
     if not paths:
         return os.curdir
+    # On Windows, if paths is ['C:','folder','subfolder'] then 
+    # os.path.join(*paths) will return 'C:folder\subfolder' which
+    # is thus relative to the CWD on that drive. So we work around
+    # this by adding a \ to path[0]
+    if (len(paths) > 0 and paths[0].endswith(':') and 
+        sys.platform == "win32" and sys.version.find("GCC") >= 0):
+        paths[0] += '\\'
     return os.path.join(*paths)
 
 # convert_path ()
