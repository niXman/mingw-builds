#!/bin/bash

#
# The BSD 3-Clause License. http://www.opensource.org/licenses/BSD-3-Clause
#
# This file is part of 'MinGW-W64' project.
# Copyright (c) 2011,2012,2013 by niXman (i dotty nixman doggy gmail dotty com)
# Copyright (c) 2012,2013 by Alexpux (alexpux doggy gmail dotty com)
# All rights reserved.
#
# Project: MinGW-W64 ( http://sourceforge.net/projects/mingw-w64/ )
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.
# - Neither the name of the 'MinGW-W64' nor the names of its contributors may
#     be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# **************************************************************************

# Loading functions
source library/functions.sh

readonly ORIGINAL_PATH=$PATH
readonly TOP_DIR=$(func_simplify_path "$PWD")

# **************************************************************************
# Loading default configuration
source library/default_config.sh

# **************************************************************************

readonly RUN_ARGS="$@"
[[ $# == 1 && $1 == --help	|| $[ $# == 0 ] == 1 ]] && {
	echo "usage:"
	echo "  ./${0##*/} --mode=[clang|gcc|python]-version --arch=<x32|x64> [OPTIONS]"
	echo "  help:"
	echo "    --buildroot=<path>         - specifies the build root directory"
	echo "    --fetch-only               - download sources without building"
	echo "    --exceptions=<type>        - specifies exceptions model for GCC"
	echo "                                 available: dwarf, seh, sjlj"
	echo "    --use-lto                  - build with LTO using"
	echo "    --bootstrap                - bootstraping GCC"
	echo "    --no-multilib              - build GCC without multilib support"
	echo "    --no-strip                 - don't strip dll's & executables on install"
	echo "    --dyn-deps                 - build GCC with dynamically dependencies"
	echo "    --jobs=N                   - specifies number of parallel make threads"
	echo "    --rev=N                    - specifies number of the build revision"
	echo "    --threads=<model>          - specifies the threads model for GCC/libstdc++"
	echo "                                 available: win32, posix"
	echo "    --arch=<x32|x64>           - specifies the architecture"
	echo "    --mode=<[clang|gcc|python]-version>  - specify building software with version"
	echo "    --version                  - print the version of the MinGW-W64 builds scripts"
	echo "    --mingw-compress           - compressing MinGW"
	echo "    --src-compress             - compressing sources"
	echo "    --mingw-upload             - upload toolchain archives to sf-project"
	echo "    --src-upload               - upload sources archive to sf-project"
	echo "    --sf-user=<username>       - username to upload to sf-project"
	echo "    --sf-password=<user_pass>  - password to upload to sf-project"	
	echo "    --cflags='<flags>'         - additional CFLAGS"
	echo "    --cxxflags='<flags>'       - additional CXXFLAGS"
	echo "    --cppflags='<flags>'       - additional CPPFLAGS"
	echo "    --ldflags='<flags>'        - additional LDFLAGS"
	echo "    --march-x32='<arch>'       - arch for x32 target"
	echo "    --mtume-x32='<arch>'       - tune for x32 target"
	echo "    --march-x64='<arch>'       - arch for x64 target"
	echo "    --mtume-x64='<arch>'       - tune for x64 target"
	echo "    --enable-languages=<langs> - comma separated list(without spaces) of gcc"
	echo "                                 supported languages. available languages:"
	echo "                                 ada,c,c++,fortran,objc,obj-c++"
	echo "  available Python versions: 2.7.3, 2.7.4, 2.7.5"
	echo "  available clang versions: 3.3, git"
	echo "  available gcc versions:"
	echo "    gcc-4.6.2 (4.6.2 release)"
	echo "    gcc-4.6.3 (4.6.3 release)"
	echo "    gcc-4.6.4 (4.6.4 release)"
	#echo "    gcc-4.6.5 (4.6.5 release)"
	#echo "    gcc-4.6.6 (4.6.6 release)"
	echo "    gcc-4.7.0 (4.7.0 release)"
	echo "    gcc-4.7.1 (4.7.1 release)"
	echo "    gcc-4.7.2 (4.7.2 release)"
	echo "    gcc-4.7.3 (4.7.3 release)"
	#echo "    gcc-4.7.4 (4.7.4 release)"
	echo "    gcc-4.8.0 (4.8.0 release)"
	echo "    gcc-4.8.1 (4.8.1 release)"
	#echo "    gcc-4.8.2 (4.8.2 release)"
	echo "    gcc-4_6-branch (currently 4.6.5-prerelease)"
	echo "    gcc-4_7-branch (currently 4.7.4-prerelease)"
	echo "    gcc-4_8-branch (currently 4.8.2-prerelease)"
	echo "    gcc-trunk (currently 4.9.0-snapshot)"

	exit 0
}

# **************************************************************************

while [[ $# > 0 ]]; do
	case $1 in
		--march-x32=*) PROCESSOR_OPTIMIZATION_ARCH_32=${1/--march-x32=/} ;;
		--mtume-x32=*) PROCESSOR_OPTIMIZATION_TUNE_32=${1/--mtume-x32=/} ;;
		--march-x64=*) PROCESSOR_OPTIMIZATION_ARCH_64=${1/--march-x64=/} ;;
		--mtume-x64=*) PROCESSOR_OPTIMIZATION_TUNE_64=${1/--mtume-x64=/} ;;
		--cflags=*) BASE_CFLAGS="$BASE_CFLAGS ${1/--cflags=/}" ;;
		--cxxflags=*) BASE_CXXFLAGS="$BASE_CXXFLAGS ${1/--cxxflags=/}" ;;
		--cppflags=*) BASE_CPPFLAGS="$BASE_CPPFLAGS ${1/--cppflags=/}" ;;
		--ldflags=*) BASE_LDFLAGS="$BASE_LDFLAGS ${1/--ldflags=/}" ;;
		--buildroot=*)
			ROOT_DIR=${1/--buildroot=/}
			ROOT_DIR=${ROOT_DIR//:/:\/}
			ROOT_DIR=${ROOT_DIR//\/\//\/}
			mkdir -p ${ROOT_DIR} || die "incorrect buildroot directory: \"${ROOT_DIR}\". terminate."
			pushd ${ROOT_DIR} > /dev/null
			ROOT_DIR=$PWD
			popd > /dev/null
		;;
		--bootstrap) BOOTSTRAPING=yes ;;
		--fetch-only) FETCH_MODE=yes ;;
		--enable-languages=*)
			func_check_languages "${1/--enable-languages=/}"
			ENABLE_LANGUAGES=${1/--enable-languages=/}
		;;
		--exceptions=*)
			EXCEPTIONS_MODEL=${1/--exceptions=/}
			case $EXCEPTIONS_MODEL in
			dwarf)
				USE_MULTILIB=no
				BUILD_ARCHITECTURE=x32
			;;
			seh)
				USE_MULTILIB=no
				BUILD_ARCHITECTURE=x64
			;;
			sjlj)
				USE_MULTILIB=$USE_MULTILIB			
			;;
			*)
				die "\"$EXCEPTIONS_MODEL\" is not valid exception model. available models: dwarf, seh, sjlj. terminate."
			;;
			esac	
		;;
		--use-lto)
			BASE_CFLAGS="$BASE_CFLAGS -flto -fno-use-linker-plugin"
			BASE_CXXFLAGS="$BASE_CXXFLAGS -flto -fno-use-linker-plugin"
			BASE_LDFLAGS="$BASE_LDFLAGS -flto -fno-use-linker-plugin"
		;;
		--no-multilib) USE_MULTILIB=no ;;
		--no-strip) STRIP_ON_INSTALL=no ;;
		--dyn-deps)
			GCC_DEPS_LINK_TYPE=$LINK_TYPE_SHARED
			LINK_TYPE_SUFFIX=shared
		;;
		--jobs=*)
			[[ ${1/--jobs=/} == 0 ]] && {
				die "jobs value must be greater then 0. terminate."
			}
			JOBS=${1/--jobs=/}
		;;
		--threads=*) 
			THREADS_MODEL=${1/--threads=/}
			case $THREADS_MODEL in
			win32 | posix)
			;;
			*)
				die "\"$THREADS_MODEL\" is not valid threads model. available models: posix, win32. terminate"
			;;
			esac
		;;
		--mode=*)
			[[ ! -f $TOP_DIR/scripts/${1/--mode=/}.sh ]] && {
				die "bad mode. Script ${1/--mode=/}.sh not found. terminate."
			}
			BUILD_MODE_VERSION=${1/--mode=/}
			BUILD_MODE=${BUILD_MODE_VERSION%%-*}
			case $BUILD_MODE in
				clang)
					CLANG_VERSION=${BUILD_MODE_VERSION#*-}
				;;
				gcc)
					GCC_NAME=$BUILD_MODE_VERSION
				;;
				python)
					PYTHON_VERSION=${BUILD_MODE_VERSION#*-}
				;;
				*) die "Unsupported mode: \"$BUILD_MODE.\" terminate."
			esac
		;;
		--arch=*)
			BUILD_ARCHITECTURE=${1/--arch=/}
			case $BUILD_ARCHITECTURE in
				x32|x64)
				;;
				*) die "Unsupported architecture: \"$BUILD_ARCHITECTURE\". terminate." 
				;;
			esac
		;;
		--rev=*)
			REV_NUM=${1/--rev=/}
			PKG_VERSION="rev$REV_NUM, $PKG_VERSION"
		;;
		--version) echo $MINGW_W64_BUILDS_VERSION; exit 0 ;;
		--mingw-compress) COMPRESSING_MINGW=yes ;;
		--src-compress) COMPRESSING_SRCS=yes ;;
		--mingw-upload) UPLOAD_MINGW=yes ;;
		--src-upload) UPLOAD_SOURCES=yes ;;
		--sf-user=*) SF_USER=${1/--sf-user=/} ;;
		--sf-password=*) SF_PASSWORD=${1/--sf-password=/} ;;
		--debug-upload) DEBUG_UPLOAD=yes ;;
		*)
			die "bad command line: \"$1\". terminate."
		;;
	esac
	shift
done

# **************************************************************************

[[ $UPLOAD_MINGW == yes || $UPLOAD_SOURCES == yes ]] && {
	[[ -z $SF_USER ]]     && { die "please specify sourceforge user login with '--sf-user=<user>'. terminate."; }
	[[ -z $SF_PASSWORD ]] && { die "please specify sourceforge user password with '--sf-password=<password>'. terminate."; }
}

# **************************************************************************

[[ -z ${BUILD_ARCHITECTURE} ]] && {
	die "Build architecture is not specified. terminate."
}

# **************************************************************************
# Determine operating system and load appropriate config
# **************************************************************************
. $TOP_DIR/library/os_detect.sh

# **************************************************************************

[[ $BUILD_MODE == gcc ]] && {
	[[ $IS_64BIT_HOST == no ]] && {
		[[ $BUILD_ARCHITECTURE == x64 ]] && {
			die "you can't build 64-bit toolchain using 32-bit OS. terminate."
		}
		[[ $USE_MULTILIB == yes ]] && {
			die "you can't build multitarget MinGW using 32-bit OS. terminate."
		}
	}
	case $EXCEPTIONS_MODEL in
		dwarf)
			[[ ${BUILD_ARCHITECTURE} == x64 ]] && {
				die "DWARF exceptions not allowed on x86_64 architecture. terminate."
			}
		;;
		seh)
			[[ ${BUILD_ARCHITECTURE} == x32 ]] && {
				die "SEH exceptions not allowed on i686 architecture. terminate."
			}
		;;	
		sjlj)
		
		;;
	esac
	[[ $EXCEPTIONS_MODEL != sjlj && $USE_MULTILIB == yes ]] && {
		die "\"$EXCEPTIONS_MODEL\" exceptions not allowed on multilib architecture. terminate."
	}
}

[[ $[ $COMPRESSING_MINGW == yes || $COMPRESSING_SRCS == yes ] == 1 ]] && {
	func_check_program "7za"
}

[[ $BUILD_MODE != gcc && $COMPRESSING_SRCS == yes ]] && {
	die "compressing sources for \"$BUILD_MODE\" mode is currently unimplemented. terminate."
}

# **************************************************************************
# Creating necessary directories
# **************************************************************************
[[ ! -d $ROOT_DIR ]] && {
	mkdir -p $ROOT_DIR
	[[ $? == 0 ]] && {
		rm -Rf $ROOT_DIR
	} || {
		die "bad build root directory. terminate."
	}
}

readonly SRCS_DIR=$ROOT_DIR/src
readonly MARKERS_DIR=$SRCS_DIR/MARKERS
readonly PREREQ_DIR=$ROOT_DIR/mingw-prereq
readonly RUNTIME_DIR=$ROOT_DIR/mingw-runtime
readonly ARCHIVES_DIR=$ROOT_DIR/mingw-archives
readonly PREREQ_BUILD_DIR=$ROOT_DIR/prereq-build
readonly PREREQ_LOGS_DIR=$ROOT_DIR/prereq-logs

[[ -n $REV_NUM ]] && {
	readonly REV_STRING="-r$REV_NUM"
} || {
	readonly REV_STRING=""
}

[[ $BUILD_MODE == gcc ]] && {
	GCC_PART_NAME=${GCC_NAME/gcc-/}
	GCC_PART_NAME=${GCC_PART_NAME/-branch/b}
	readonly GCC_PART_NAME=${GCC_PART_NAME//./}
	readonly BASE_BUILD_DIR=$ROOT_DIR/${BUILD_ARCHITECTURE}-$GCC_PART_NAME-$THREADS_MODEL-$EXCEPTIONS_MODEL${REV_STRING}
	readonly PREFIX=$BASE_BUILD_DIR/mingw${BUILD_ARCHITECTURE/x/}
	readonly MINGWPREFIX=/mingw${BUILD_ARCHITECTURE/x/}
	MINGW_BUILD_NAME=${BUILD_ARCHITECTURE}-${GCC_NAME/gcc-/}
	MINGW_BUILD_NAME=$MINGW_BUILD_NAME$([[ $USE_MULTILIB == yes ]] && echo -n -multilib)-$THREADS_MODEL-$EXCEPTIONS_MODEL
	readonly MINGW_BUILD_NAME=$MINGW_BUILD_NAME$([[ -n $REV_NUM ]] && echo -n -rev$REV_NUM)	
} || {
	readonly BASE_BUILD_DIR=$ROOT_DIR/$BUILD_MODE-${BUILD_ARCHITECTURE}$REV_STRING
	readonly PREFIX=$BASE_BUILD_DIR/${BUILD_MODE_VERSION}-${BUILD_ARCHITECTURE}
}

readonly BUILDS_DIR=$BASE_BUILD_DIR/build
readonly LIBS_DIR=$BASE_BUILD_DIR/libs
readonly LOGS_DIR=$BASE_BUILD_DIR/logs

mkdir -p \
	$SRCS_DIR \
	$MARKERS_DIR \
	$ARCHIVES_DIR \
	$BASE_BUILD_DIR \
	$PREFIX \
	$BUILDS_DIR \
	$LIBS_DIR \
	$LOGS_DIR

[[ $BUILD_MODE == gcc ]] && {
	mkdir -p \
		$PREREQ_DIR \
		$RUNTIME_DIR \
		$PREREQ_BUILD_DIR \
		$PREREQ_LOGS_DIR
}
# **************************************************************************

. ./library/subtargets.sh

# **************************************************************************

[[ $LINK_TYPE_SUFFIX == shared ]] && {
	readonly x32_PATH=$PREREQ_DIR/$x32_HOST-$LINK_TYPE_SUFFIX/bin:$x32_HOST_MINGW_PATH/bin:$ORIGINAL_PATH
	readonly x64_PATH=$PREREQ_DIR/$x64_HOST-$LINK_TYPE_SUFFIX/bin:$x64_HOST_MINGW_PATH/bin:$ORIGINAL_PATH
} || {
	readonly x32_PATH=$x32_HOST_MINGW_PATH/bin:$ORIGINAL_PATH
	readonly x64_PATH=$x64_HOST_MINGW_PATH/bin:$ORIGINAL_PATH
}

# **************************************************************************

[[ $BUILD_ARCHITECTURE == x32 ]] && {
	HOST=$x32_HOST
	BUILD=$x32_BUILD
	TARGET=$x32_TARGET

	[[ ! -f $x32_HOST_MINGW_PATH/bin/gcc ]] && {
		die "gcc is not exists in the \"$x32_HOST_MINGW_PATH/bin\" directory. terminate."
	}
	export PATH="$x32_PATH"
} || {
	HOST=$x64_HOST
	BUILD=$x64_BUILD
	TARGET=$x64_TARGET
	
	[[ ! -f $x64_HOST_MINGW_PATH/bin/gcc ]] && {
		die "gcc is not exists in the \"$x64_HOST_MINGW_PATH/bin\" directory. terminate."
	}
	export PATH="$x64_PATH"
}

# **************************************************************************

[[ $USE_MULTILIB == yes ]] && {
	readonly REVERSE_HOST=$(func_get_reverse_triplet $HOST)
	readonly REVERSE_BUILD=$(func_get_reverse_triplet $BUILD)
	readonly REVERSE_TARGET=$(func_get_reverse_triplet $TARGET)
	readonly ENABLE_TARGETS=${TARGET},${REVERSE_TARGET}
	readonly REVERSE_ARCHITECTURE=$(func_get_reverse_arch $BUILD_ARCHITECTURE)
} || {
	readonly ENABLE_TARGETS=$TARGET
}

# **************************************************************************

readonly COMMON_CFLAGS="$BASE_CFLAGS -I$LIBS_DIR/include -I$PREREQ_DIR/${BUILD_ARCHITECTURE}-zlib/include -I$PREREQ_DIR/$HOST-$LINK_TYPE_SUFFIX/include"
readonly COMMON_CXXFLAGS="$COMMON_CFLAGS"
readonly COMMON_CPPFLAGS="$BASE_CPPFLAGS"
readonly COMMON_LDFLAGS="$BASE_LDFLAGS -L$LIBS_DIR/lib -L$PREREQ_DIR/${BUILD_ARCHITECTURE}-zlib/lib -L$PREREQ_DIR/$HOST-$LINK_TYPE_SUFFIX/lib -L$PREFIX/opt/lib"

# **************************************************************************

[[ $FETCH_MODE == yes ]] && {
	echo -n "-> fetch sources for building ${BUILD_MODE_VERSION}-"
	[[ $BUILD_MODE == gcc ]] && {
		[[ $USE_MULTILIB == yes && $EXCEPTIONS_MODEL == sjlj ]] && echo -n "multilib-"
		[[ ${BUILD_ARCHITECTURE} == x32 ]] && echo -n "x32-" || echo -n "x64-"
		echo "$EXCEPTIONS_MODEL"
	} || {
		[[ ${BUILD_ARCHITECTURE} == x32 ]] && echo -n "x32" || echo -n "x64"
	}
} || {
	[[ $BUILD_MODE == gcc ]] && {
		echo "-> start building $MINGW_BUILD_NAME"
	} || {
		echo "-> start building ${BUILD_MODE_VERSION}-${BUILD_ARCHITECTURE}"
	}
}

for sub in ${SUBTARGETS[@]}; do
	[[ ! -f $TOP_DIR/scripts/$sub.sh ]] && {
		die "script for subtarget \"$sub\" is not exists. terminate."
	}
	[[ $FETCH_MODE == yes ]] && {
		[[ -z $( grep 'URL=' $TOP_DIR/scripts/${sub}.sh ) ]] && continue
	}
	echo -e "-> \E[32;40m$sub\E[37;40m"

	NAME=""
	PRIORITY=""
	EXECUTE_AFTER_DOWNLOAD=()
	EXECUTE_AFTER_UNCOMPRESS=()
	EXECUTE_AFTER_PATCH=()
	EXECUTE_AFTER_INSTALL=()

	. $TOP_DIR/scripts/$sub.sh

	[[ -z $NAME ]] && continue

	case $PRIORITY in
		prereq | runtime)
			CURR_LOGS_DIR=$PREREQ_LOGS_DIR
			CURR_BUILD_DIR=$PREREQ_BUILD_DIR
		;;
		main | extra)
			CURR_LOGS_DIR=$LOGS_DIR
			CURR_BUILD_DIR=$BUILDS_DIR
		;;
		*)
			CURR_LOGS_DIR=$LOGS_DIR
			CURR_BUILD_DIR=$BUILDS_DIR			
		;;
	esac
	
	CONFIGURE_LOG=$CURR_LOGS_DIR/$NAME/configure.log
	MAKE_LOG=$CURR_LOGS_DIR/$NAME/make.log
	INSTALL_LOG=$CURR_LOGS_DIR/$NAME/install.log

	mkdir -p $SRCS_DIR/$SRC_DIR_NAME
	mkdir -p {$CURR_LOGS_DIR/,$CURR_BUILD_DIR/}$NAME
	#[[ $NAME != $SRC_DIR_NAME ]] && mkdir -p {$BUILDS_DIR/,$LOGS_DIR/}$NAME

	func_download \
		URL[@]

	func_uncompress \
		URL[@]

	[[ $FETCH_MODE == no ]] && {
		[[ ${#EXECUTE_AFTER_UNCOMPRESS[@]} >0 ]] && {
			func_execute \
				$SRCS_DIR \
				$SRC_DIR_NAME \
				"execute commands..." \
				"after_unpack" \
				$CURR_LOGS_DIR \
				EXECUTE_AFTER_UNCOMPRESS[@]
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $SRCS_DIR/$SRC_DIR_NAME/exec-after_unpack-$_index.log &
				exit $func_res
			}
		}

		func_apply_patches \
			$SRCS_DIR \
			$SRC_DIR_NAME \
			$CURR_LOGS_DIR \
			$PATCHES_DIR \
			PATCHES[@]
		func_res=$?
		[[ $func_res != 0 ]] && {
			[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $SRCS_DIR/$SRC_DIR_NAME/patch-$_index.log &
			exit $func_res
		}

		[[ ${#EXECUTE_AFTER_PATCH[@]} >0 ]] && {
			func_execute \
				$SRCS_DIR \
				$SRC_DIR_NAME \
				"execute commands..." \
				"after_patch" \
				$CURR_LOGS_DIR \
				EXECUTE_AFTER_PATCH[@]
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $SRCS_DIR/$SRC_DIR_NAME/exec-after_patch-$_index.log &
				exit $func_res
			}
		}

		[[ ${#CONFIGURE_FLAGS[@]} >0 ]] && {
			configure_flags="${CONFIGURE_FLAGS[@]}"
			func_configure \
				$NAME \
				$SRC_DIR_NAME \
				"$configure_flags" \
				$CONFIGURE_LOG \
				$CURR_BUILD_DIR
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $CONFIGURE_LOG &
				exit $func_res
			}
		}

		[[ ${#MAKE_FLAGS[@]} >0 ]] && {
			make_flags="/bin/make ${MAKE_FLAGS[@]}"
			func_make \
				$NAME \
				$SRC_DIR_NAME \
				"$make_flags" \
				$MAKE_LOG \
				"building..." \
				"built" \
				$CURR_BUILD_DIR
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $MAKE_LOG &
				exit $func_res
			}
		}

		[[ ${#INSTALL_FLAGS[@]} >0 ]] && {
			install_flags="/bin/make ${INSTALL_FLAGS[@]}"
			func_make \
				$NAME \
				$SRC_DIR_NAME \
				"$install_flags" \
				$INSTALL_LOG \
				"installing..." \
				"installed" \
				$CURR_BUILD_DIR
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $INSTALL_LOG &
				exit $func_res
			}
		}
	
		[[ ${#EXECUTE_AFTER_INSTALL[@]} >0 ]] && {
			func_execute \
				$CURR_BUILD_DIR \
				$NAME \
				"execute commands..." \
				"after_install" \
				$CURR_LOGS_DIR \
				EXECUTE_AFTER_INSTALL[@]
			func_res=$?
			[[ $func_res != 0 ]] && {
				[[ $SHOW_LOG_ON_ERROR == yes ]] && $LOGVIEWER $CURR_BUILD_DIR/$NAME/exec-after_install-$_index.log &
				exit $func_res
			}
		}
	}
done

[[ $FETCH_MODE == yes ]] && {
	echo "Sources downloaded successfully."
	exit 0
}

# ***************************************************************************

[[ $COMPRESSING_SRCS == yes ]] && {
	echo -e "-> \E[32;40mcompress mingw sources\E[37;40m"
	. $TOP_DIR/scripts/srcs-compress.sh
}

# ***************************************************************************

[[ $UPLOAD_MINGW == yes ]] && {
	mingw_archive_name=$( \
		func_create_mingw_archive_name \
			$ARCHIVES_DIR \
			$SRCS_DIR \
			$GCC_NAME \
			$BUILD_ARCHITECTURE \
			$EXCEPTIONS_MODEL \
			$THREADS_MODEL \
			$REV_NUM \
	)

	upload_cmd=$( \
		func_create_mingw_upload_cmd \
			$ARCHIVES_DIR \
			$SF_USER \
			$SF_PASSWORD \
			$GCC_NAME \
			$mingw_archive_name \
			$BUILD_ARCHITECTURE \
			$THREADS_MODEL \
			$EXCEPTIONS_MODEL \
	)
	mingw_archive_size=$(du -h $mingw_archive_name | cut -f 1)
	echo -e -n "-> \E[32;40mupload $(basename $mingw_archive_name) ($mingw_archive_size) ...\E[37;40m"
	[[ $DEBUG_UPLOAD == yes ]] && {
		echo
		echo "bin_cmd:${upload_cmd}"
	} || {
		eval "${upload_cmd} > $LOGS_DIR/$GCC_NAME/${BUILD_ARCHITECTURE}-mingw-upload.log 2>&1"
		func_res=$?
		[[ $func_res != 0 ]] && {
			die "upload finished with error($func_res). terminate."
		} || {
			echo "done"
		}
	}
	[[ $(func_map_gcc_name_to_gcc_type $GCC_NAME) == release ]] && {
		echo -e -n "--> \E[32;40mdownload repository file...\E[37;40m"
		[[ $DEBUG_UPLOAD == yes ]] && {
			func_res=0
		} || {
			wget $REPOSITORY_FILE -O $TMP/$(basename $REPOSITORY_FILE) > /dev/null 2>&1
			func_res=$?
		}
		[[ $func_res != 0 ]] && {
			die "error($func_res) when downloading repository file. terminate."
		} || {
			echo "done"
		}
	
		echo -e -n "--> \E[32;40mupdate repository file...\E[37;40m"
		[[ $DEBUG_UPLOAD == no ]] && {
			func_update_repository_file \
				$TMP/$(basename $REPOSITORY_FILE) \
				$(func_map_gcc_name_to_gcc_version $GCC_NAME) \
				$BUILD_ARCHITECTURE \
				$THREADS_MODEL \
				$EXCEPTIONS_MODEL \
				$REV_NUM \
				$(func_create_url_for_archive \
					$PROJECT_ROOT_URL \
					$GCC_NAME \
					$BUILD_ARCHITECTURE \
					$THREADS_MODEL \
					$EXCEPTIONS_MODEL \
				) \
				$(basename $mingw_archive_name)
		}
		echo "done"
		
		upload_cmd=$( \
			func_create_repository_file_upload_cmd \
				$TMP/$(basename $REPOSITORY_FILE) \
				$SF_USER \
				$SF_PASSWORD \
		)
		echo -e -n "--> \E[32;40mupload repository file...\E[37;40m"
		[[ $DEBUG_UPLOAD == yes ]] && {
			echo "rep_cmd:${upload_cmd}"
		} || {
			eval "${upload_cmd} > $LOGS_DIR/$GCC_NAME/${BUILD_ARCHITECTURE}-repository-upload.log 2>&1"
			func_res=$?
			[[ $func_res != 0 ]] && {
				die "error($func_res) when uploading repository file. terminate."
			} || {
				echo "done"
			}
		}
	}
}

[[ $UPLOAD_SOURCES == yes ]] && {
	sources_archive_name=$( \
		func_create_sources_archive_name \
			$ARCHIVES_DIR \
			$SRCS_DIR \
			$GCC_NAME \
			$REV_NUM \
	)
	upload_cmd=$( \
		func_create_sources_upload_cmd \
			$ARCHIVES_DIR \
			$SF_USER \
			$SF_PASSWORD \
			$GCC_NAME \
			$sources_archive_name \
	)
	sources_archive_size=$(du -h $sources_archive_name | cut -f 1)
	echo -e -n "-> \E[32;40mupload $(basename $sources_archive_name) ($sources_archive_size) ...\E[37;40m"
	[[ $DEBUG_UPLOAD == yes ]] && {
		echo "src_cmd:${upload_cmd}"
	} || {
		eval "${upload_cmd} > $LOGS_DIR/$GCC_NAME/sources-upload.log 2>&1"
	}
	
	func_res=$?
	[[ $func_res != 0 ]] && {
		die "upload finished with error($func_res). terminate."
	} || {
		echo "done"
	}
}

exit 0

# ***************************************************************************
